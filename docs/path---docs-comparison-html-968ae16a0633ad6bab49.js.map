{"version":3,"sources":["webpack:///path---docs-comparison-html-968ae16a0633ad6bab49.js","webpack:///./.cache/json/docs-comparison-html.json"],"names":["webpackJsonp","393","module","exports","data","markdownRemark","html","frontmatter","title","next","prev","fields","path","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,+/GAAAC,aAAikHC,MAAA,aAAAC,KAAA,KAAAC,KAAA,wBAA+DC,QAAWC,KAAA,qBAAAC,KAAA,0BAA4DC,aAAgBD,KAAA","file":"path---docs-comparison-html-968ae16a0633ad6bab49.js","sourcesContent":["webpackJsonp([178760581306290],{\n\n/***/ 393:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Purgecss is not the only tool to remove unused css. Below you will find a list of some of the tools available as well as a comparison with Purgecss</p>\\n<h2 id=\\\"purifycss\\\"><a href=\\\"#purifycss\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Purifycss</h2>\\n<p>The biggest flaw with purifycss is its lack of modularity. It is also is biggest\\nbenefit, purifycss can work with any files, not just html or javascript. But\\npurifycss works by looking at all the words in the files and comparing them with\\nthe selectors in the css. Every words is consider a selector, which means that a\\nlot of selectors can be consider used because you have the selector name in a\\nparagraph or somewhere in your files.</p>\\n<p>Purgecss fixes this problem by providing the possibility to create an\\n<em>extractor</em>, an extractor is a function that takes the content of a file and\\nextract the list of css selectors in it. It allows a perfect removal of unused\\ncss. The extractor can used a parser that returns an ast and then looks through\\nit to select the css selectors. That is the way <code>purge-from-html</code> works. You can\\nspecified which selectors you want to use for each types of files, and so, get\\nthe most accurate results. You can still use the default or the legacy extractor\\nthat will act the same way as purifycss.</p>\\n<h2 id=\\\"uncss\\\"><a href=\\\"#uncss\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Uncss</h2>\\n<p>As indicated in its Readme, Uncss works the following way:</p>\\n<ol>\\n<li>The HTML files are loaded by jsdom and JavaScript is executed.</li>\\n<li>All the stylesheets are parsed by PostCSS.</li>\\n<li>document.querySelector filters out selectors that are not found in the HTML\\nfiles.</li>\\n<li>The remaining rules are converted back to CSS.</li>\\n</ol>\\n<p>Because of the emulation of html, and the execution of javascript, uncss is\\neffective at removing unused selectors from web application. But the emulation\\ncan have a cost in term of performance and practicality. Uncss works by\\nemulating the html files. To remove unused css from pug template files, you will\\nneed to convert pug to html and then emulate the page inside jsdom and uncss\\nwill run <code>document.querySelector</code> on each selectors and step 4.</p>\\n<p>Uncss by its design is probably the most accurate tool to remove css out of a web\\napplication at this moment if you do not use server side rendering.</p>\\n<p>Purgecss does not have an extractor right now for javascript files. But because\\nof its modularity, developers can create an extractor for specific framework\\n(vue, react, aurelia) and files (pug, ejs) and get the most accurate result\\nwithout the need of emulation.</p>\",\"frontmatter\":{\"title\":\"Comparison\",\"next\":null,\"prev\":\"use-with-rollup.html\"},\"fields\":{\"path\":\"docs/comparison.md\",\"slug\":\"docs/comparison.html\"}}},\"pathContext\":{\"slug\":\"docs/comparison.html\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-comparison-html-968ae16a0633ad6bab49.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Purgecss is not the only tool to remove unused css. Below you will find a list of some of the tools available as well as a comparison with Purgecss</p>\\n<h2 id=\\\"purifycss\\\"><a href=\\\"#purifycss\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Purifycss</h2>\\n<p>The biggest flaw with purifycss is its lack of modularity. It is also is biggest\\nbenefit, purifycss can work with any files, not just html or javascript. But\\npurifycss works by looking at all the words in the files and comparing them with\\nthe selectors in the css. Every words is consider a selector, which means that a\\nlot of selectors can be consider used because you have the selector name in a\\nparagraph or somewhere in your files.</p>\\n<p>Purgecss fixes this problem by providing the possibility to create an\\n<em>extractor</em>, an extractor is a function that takes the content of a file and\\nextract the list of css selectors in it. It allows a perfect removal of unused\\ncss. The extractor can used a parser that returns an ast and then looks through\\nit to select the css selectors. That is the way <code>purge-from-html</code> works. You can\\nspecified which selectors you want to use for each types of files, and so, get\\nthe most accurate results. You can still use the default or the legacy extractor\\nthat will act the same way as purifycss.</p>\\n<h2 id=\\\"uncss\\\"><a href=\\\"#uncss\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Uncss</h2>\\n<p>As indicated in its Readme, Uncss works the following way:</p>\\n<ol>\\n<li>The HTML files are loaded by jsdom and JavaScript is executed.</li>\\n<li>All the stylesheets are parsed by PostCSS.</li>\\n<li>document.querySelector filters out selectors that are not found in the HTML\\nfiles.</li>\\n<li>The remaining rules are converted back to CSS.</li>\\n</ol>\\n<p>Because of the emulation of html, and the execution of javascript, uncss is\\neffective at removing unused selectors from web application. But the emulation\\ncan have a cost in term of performance and practicality. Uncss works by\\nemulating the html files. To remove unused css from pug template files, you will\\nneed to convert pug to html and then emulate the page inside jsdom and uncss\\nwill run <code>document.querySelector</code> on each selectors and step 4.</p>\\n<p>Uncss by its design is probably the most accurate tool to remove css out of a web\\napplication at this moment if you do not use server side rendering.</p>\\n<p>Purgecss does not have an extractor right now for javascript files. But because\\nof its modularity, developers can create an extractor for specific framework\\n(vue, react, aurelia) and files (pug, ejs) and get the most accurate result\\nwithout the need of emulation.</p>\",\"frontmatter\":{\"title\":\"Comparison\",\"next\":null,\"prev\":\"use-with-rollup.html\"},\"fields\":{\"path\":\"docs/comparison.md\",\"slug\":\"docs/comparison.html\"}}},\"pathContext\":{\"slug\":\"docs/comparison.html\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-comparison-html.json\n// module id = 393\n// module chunks = 178760581306290"],"sourceRoot":""}